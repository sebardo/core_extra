<?php

namespace CoreExtraBundle\Entity\Repository;

/**
 * VisitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VisitRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Count the total of rows
     *
     * @param int|null $actorId The Actor ID
     *
     * @return int
     */
    public function countTotal($actorId = null)
    {
        $qb = $this->getQueryBuilder()
            ->select('COUNT(v)');

        if (!is_null($actorId)) {
            $qb->where('v.actor = :actor_id')
                ->setParameter('actor_id', $actorId);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Find all rows filtered for DataTables
     *
     * @param string   $search        The search string
     * @param int      $sortColumn    The column to sort by
     * @param string   $sortDirection The direction to sort the column
     * @param int|null $entityId    The entity ID
     *
     * @return \Doctrine\ORM\Query
     */
    public function findAllForDataTables($search, $sortColumn, $sortDirection, $entityId=null)
    {
     
        $qb = $this->getQueryBuilder();
       
        // select
        $qb->select('v.id, v.dateFrom, v.dateTo, v.comment, v.sent, v.feedback, a.name ')
           ->join('v.actor', 'a')
            ;
       
        if(!is_null($entityId)){
            // where
           $qb->where('v.actor = :actor_id')
                ->setParameter('actor_id', $entityId);
        }

        // search
        if (!empty($search)) {
            $qb->andWhere('a.name LIKE :search')
                ->setParameter('search', '%'.$search.'%');
        }

        // sort by column
        switch($sortColumn) {
            case 0:
                $qb->orderBy('v.id', $sortDirection);
                break;
            case 1:
                $qb->orderBy('v.dateFrom', $sortDirection);
                break;
            case 2:
                $qb->orderBy('v.dateTo', $sortDirection);
                break;
            case 3:
                $qb->orderBy('v.sent', $sortDirection);
                break;
            case 4:
                $qb->orderBy('a.name', $sortDirection);
                break;
        }

        return $qb->getQuery();
    }
 
            
            
    private function getQueryBuilder()
    {
        $em = $this->getEntityManager();

        $qb = $em->getRepository('CoreExtraBundle:Visit')
            ->createQueryBuilder('v');

        return $qb;
    }
}
